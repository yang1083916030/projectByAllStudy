package com.zdsoft.framework.common.util;

import java.security.InvalidKeyException;
import java.security.Key;
import java.security.NoSuchAlgorithmException;
import java.security.Security;

import javax.crypto.BadPaddingException;
import javax.crypto.Cipher;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.NoSuchPaddingException;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * @功能：基于DES方式的加密、解密工具类
 * @作者：印鲜刚
 * @创建日期：2004-4-26
 */
public class DESHelper {
	Logger logger = LoggerFactory.getLogger(DESHelper.class);

	// DES密钥字符串
	private static final String strDefaultKey = "Copyright By ZDSOFT Corp. @2012";

	// 加密对象
	private Cipher encryptCipher = null;

	// 解密对象
	private Cipher decryptCipher = null;

	/**
	 * DES构造方法
	 * 
	 * @throws NoSuchPaddingException
	 * @throws NoSuchAlgorithmException
	 * @throws InvalidKeyException
	 * 
	 * @throws Exception
	 */
	@SuppressWarnings("restriction")
	private DESHelper(String strkey) throws NoSuchAlgorithmException,
			NoSuchPaddingException, InvalidKeyException {
		Security.addProvider(new com.sun.crypto.provider.SunJCE());
		String strKey = strkey;
		Key key = getKey(strKey.getBytes());
		encryptCipher = Cipher.getInstance("DES");
		encryptCipher.init(Cipher.ENCRYPT_MODE, key);
		decryptCipher = Cipher.getInstance("DES");
		decryptCipher.init(Cipher.DECRYPT_MODE, key);
	}

	/**
	 * 利用默认密钥获取一个DESPlus对象
	 * 
	 * @return DESPlus -DESPlus对象
	 * @throws NoSuchPaddingException
	 * @throws NoSuchAlgorithmException
	 * @throws InvalidKeyException
	 * @throws Exception
	 */
	public static DESHelper getInstance() throws InvalidKeyException,
			NoSuchAlgorithmException, NoSuchPaddingException {
		return new DESHelper(strDefaultKey);
	}

	/**
	 * 使用外部密钥创建DESPlus对象
	 * 
	 * @param key
	 *            密钥
	 * @return DESPlus对象
	 * @throws NoSuchPaddingException
	 * @throws NoSuchAlgorithmException
	 * @throws InvalidKeyException
	 * @throws Exception
	 */
	public static DESHelper getInstance(String key) throws InvalidKeyException,
			NoSuchAlgorithmException, NoSuchPaddingException {
		return new DESHelper(key);
	}

	/**
	 * 从指定字符串生成密钥，密钥所需的字节数组长度为8位 不足8位时后面补0，超出8位只取前8位
	 * 
	 * @param arrBTmp
	 *            -构成该字符串的字节数组
	 * @return Key -生成的密钥
	 * @throws Exception
	 */
	private Key getKey(byte[] arrBTmp) {
		// 创建一个空的8位字节数组（默认值为0）
		byte[] arrB = new byte[8];
		// 将原始字节数组转换为8位
		for (int i = 0; i < arrBTmp.length && i < arrB.length; i++) {
			arrB[i] = arrBTmp[i];
		}
		// 生成密钥
		Key key = new javax.crypto.spec.SecretKeySpec(arrB, "DES");
		return key;
	}

	/**
	 * 将byte数组转换为表示16进制值的字符串， 如：byte[]{8,18}转换为：0813， 和private byte[]
	 * hexStr2ByteArr(String strIn) 互为可逆的转换过程
	 * 
	 * @param arrB
	 *            -需要转换的byte数组
	 * @return String -转换后的字符串
	 * @throws Exception
	 */
	private String byteArr2HexStr(byte[] arrB) {
		int iLen = arrB.length;
		// 每个byte用两个字符才能表示，所以字符串的长度是数组长度的两倍
		StringBuffer sb = new StringBuffer(iLen * 2);
		for (int i = 0; i < iLen; i++) {
			int intTmp = arrB[i];
			// 把负数转换为正数
			while (intTmp < 0) {
				intTmp = intTmp + 256;
			}
			// 小于0F的数需要在前面补0
			if (intTmp < 16) {
				sb.append("0");
			}
			sb.append(Integer.toString(intTmp, 16));
		}
		return sb.toString();
	}

	/**
	 * 将表示16进制值的字符串转换为byte数组， 和private String byteArr2HexStr(byte[] arrB)
	 * 互为可逆的转换过程
	 * 
	 * @param strIn
	 *            -需要转换的字符串
	 * @return byte[] -转换后的byte数组
	 * @throws Exception
	 */
	private byte[] hexStr2ByteArr(String strIn) {
		byte[] arrB = strIn.getBytes();
		int iLen = arrB.length;
		// 两个字符表示一个字节，所以字节数组长度是字符串长度除以2
		byte[] arrOut = new byte[iLen / 2];
		for (int i = 0; i < iLen; i = i + 2) {
			String strTmp = new String(arrB, i, 2);
			arrOut[i / 2] = (byte) Integer.parseInt(strTmp, 16);
		}
		return arrOut;
	}

	/**
	 * 加密字节数组
	 * 
	 * @param arrB
	 *            -需加密的字节数组
	 * @return byte[] -加密后的字节数组
	 * @throws BadPaddingException
	 * @throw IllegalBlockSizeException
	 * @throws Exception
	 */
	public byte[] encrypt(byte[] arrB) throws IllegalBlockSizeException,
			BadPaddingException {
		return encryptCipher.doFinal(arrB);
	}

	/**
	 * 加密字符串
	 * 
	 * @param strIn
	 *            -需加密的字符串
	 * @return String -加密后的字符串
	 * @throws BadPaddingException
	 * @throws IllegalBlockSizeException
	 * @throws Exception
	 */
	public String encrypt(String strIn) throws IllegalBlockSizeException,
			BadPaddingException {
		
		if (ObjectHelper.isEmpty(strIn))
			return null;
		return byteArr2HexStr(encrypt(strIn.getBytes()));
	}

	/**
	 * 解密字节数组
	 * 
	 * @param arrB
	 *            -需解密的字节数组
	 * @return byte[] -解密后的字节数组
	 * @throws BadPaddingException
	 * @throws IllegalBlockSizeException
	 * @throws Exception
	 */
	public byte[] decrypt(byte[] arrB) throws IllegalBlockSizeException,
			BadPaddingException {
		return decryptCipher.doFinal(arrB);
	}

	/**
	 * 解密字符串
	 * 
	 * @param strIn
	 *            -需解密的字符串
	 * @return String -解密后的字符串
	 * @throws BadPaddingException
	 * @throws IllegalBlockSizeException
	 * @throws Exception
	 */
	public String decrypt(String strIn) throws IllegalBlockSizeException,
			BadPaddingException {
		if (ObjectHelper.isEmpty(strIn))
			return null;
		return new String(decrypt(hexStr2ByteArr(strIn)));
	}
//	
//	public static void main(String[] args) throws Exception {
//		System.out.println(DESHelper.getInstance("488").decrypt("504107e1544fa1fa"));
//	}

}